
const SockhopError = require("./SockhopError.js");

/**
 * A SockhopRequest object
 *
 * This is used (primarially internally) to wrap requests to the peer
 * connection, and for them to generate and return a response.
 *
 * On the "requester-side" this object is never actually touched by the
 * user, it is auto-generated by the `.request(...)` method. On the
 * "responder-side", a copy of this object is emitted by the `request` event,
 * which the responder can use to de-payload the request via the `.type` and `.data`
 * attributes. And then `.respond(...)` a response
 */
class SockhopRequest {
    /**
     * Constructor
     *
     * @param {object} [opts] an object containing configuration options
     * @param {*} [opts.data={}] the data of this request
     * @param {string} [opts.type] the type (class-name) of the data (default is autogenerated)
     * @param {?function} [send_cb] A callback function used internally to respond to this request
     */
    constructor({ data={}, type }={}, send_cb) {
        this.data = data;
        if ( !type ) {
            this.type = data.constructor.name;
        } else {
            this.type = type;
        }
        this._send_cb = send_cb;

        this._responded = false;
    }

    toJSON() {
        return {
            data: this.data,
            type: this.type,
        };
    }

    /**
     * Send a object as a response to this request
     *
     * @param {*} obj - the response object
     * @returns {Promise} resolves on send
     * @throws {SockhopError} if the send fails
     */
    async respond(obj) {
        if ( this._responded ) throw new SockhopError("This request has already been responded to","ERR_RESPONSE_REPEAT");
        this._responded = true;
        return this._send_cb(obj);
    }

    /**
     * Parse a serialized SockhopRequest
     *
     * @static
     * @param {*} data - the serialized request object
     * @param {?function} [send_cb] A callback function used internally to respond to this request
     * @returns {SockhopRequest}
     */
    static parse(data, send_cb) {
        return new this(data, send_cb);
    }

    /**
     * Create a request from a new object payload
     *
     * @static
     * @param {object} obj - the object to be included as a payload
     * @returns {SockhopRequest}
     */
    static from_object(obj) {
        return new this({ data:obj, type:obj.constructor.name });
    }

}

/**
 * @typedef {object} SockhopResponse
 * @property {*} data - the (serialized) content of the response
 * @property {string} type - the type (usually constructor.name) of the serialized object
 */

module.exports = exports = SockhopRequest;
